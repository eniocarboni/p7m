#! /bin/bash

# ----------------------------------------
# p7m: script per la gestione dei file con firma digitale nel formato CADES.
# Vedi https://github.com/eniocarboni/p7m
# Author: Enio Carboni
# Version: 0.2
# ----------------------------------------

# DWL_ORDER: Order to choose for download program
DWL_ORDER="wget curl GET"
# DIALOG_ORDER: Order to choose of x graphic dialog
DIALOG_ORDER="kdialog zenity xmessage"
# OPEN_ORDER: Order to choose for opening program
OPEN_ORDER="xdg-open gvfs-open gnome-open"
# CA_OLD_TIME_SEC: after that second the CA file will be download
CA_OLD_TIME_SEC=1296000
# XML_CERTS: url of cnipa xml certs
#XML_CERTS='https://applicazioni.cnipa.gov.it/TSL/_IT_TSL_signed.xml'
# See https://www.agid.gov.it/it/piattaforme/firma-elettronica-qualificata/certificati
XML_CERTS='https://eidas.agid.gov.it/TL/TSL-IT.xml'
# ROTATE_NUMBER: number of rotations (for same files)
ROTATE_NUMBER=10
# MIMETYPES: path of file mime.types
MIMETYPES=/etc/mime.types
CONF_DIR=${HOME}/.config/p7m
DOWN_RIGHT_ARROW="\u21b3"
# Terminal color
RED='\033[0;31m'
BWhite='\033[1;37m'
BPurple='\033[1;35m'
BRed='\033[1;31m'
NC='\033[0m' # No Color

# ------------------------------------------------------------------------

declare -A msg
# msg lang (def it, en)
# Prendo solo i primi 2 caratteri della lingua (es it, en).
# LANG=C diventa LANG=it ed e' la lingua ufficiale
# it
msg[it:titolo:p7m]="P7M"
msg[it:titolo:openssl]="Openssl"
msg[it:titolo:openssl:verify]="Openssl verifica firma"
msg[it:titolo:openssl:cert]="Openssl Certificato"
msg[it:titolo:openssl:asn1parse]="Openssl debug"
msg[it:titolo:download]="Download"
msg[it:titolo:cert]="Cert"
msg[it:titolo:errore]="Errore"
msg[it:titolo:attenzione]="Attenzione"
msg[it:titolo:dettagli]="Dettagli"

msg[it:errore:file:ext]="Bisogna passare un file con estensione .p7m come parametro"
msg[it:errore:file:ext:bad]="Formato del file p7m non riconosciuto."
msg[it:errore:file:non_esiste]="Non esiste il file. Controllare meglio"
msg[it:errore:file:conf_dir]="Impossibile creare la directory .p7m nella tua HOME"
msg[it:openssl:estrazione:errore]="estrazione file terminata con errore"
msg[it:openssl:verifica:errore:formato]="Errore nel formato del file"
msg[it:openssl:verifica:title:ok]="Verifica firme avvenuta con successo"
msg[it:openssl:verifica:title:non_ok]="Verifica firme terminata con errore"
msg[it:openssl:verifica:ok:ok]="**Firmatario: %s**\n   Data e ora di firma: %p1\n   Ente: %p2\n   CF: %p3\n   Certificatore: %p4\n   Validità certificato: %p5 - %p6\n"
msg[it:openssl:verifica:non_ok:ok]="**Firmatario: %s**\n   Data e ora di firma: %p1\n   Ente: %p2\n   CF: %p3\n   Certificatore: %p4\n   ** Certificato non valido: %p5 - %p6\n"
msg[it:openssl:verifica:non_ok_scaduto:ok]="**Firmatario: %s**\n   Data e ora di firma: %p1\n   Ente: %p2\n   CF: %p3\n   Certificatore: %p4\n   ***Certificato scaduto: %p5 - %p6***\n"
msg[it:openssl:verifica:non_ok_scaduto:non_ok]="**Firmatario: %s**\n   *** Errore in data e ora di firma: %p1***\n   Ente: %p2\n   CF: %p3\n   Certificatore: %p4\n   *** Certificato scaduto: %p5 - %p6***\n"
msg[it:openssl:verifica:non_ok:non_ok]="**Firmatario: %s**\n   *** Errore in data e ora di firma: %p1***\n   Ente: %p2\n   CF: %p3\n   Certificatore: %p4\n   *** Errore nel certificato validità: %p5 - %p6***\n"


#msg[it:openssl:verifica:ok:ok]="Verifica certificato riuscita (riferimento temporale entro la validità del certificato)\n\nLa firma è stata fatta nel %s da %p1\nEnte: %p2\nCF: %p3\nCertificatore: %p4"
#msg[it:openssl:verifica:non_ok:ok]="Verifica certificato non riuscita ma riferimento temporale entro la validità del certificato"
#msg[it:openssl:verifica:non_ok_scaduto:ok]="Verifica certificato non riuscita (certificato scaduto) ma riferimento temporale entro la validità del certificato\n\nLa firma è stata fatta nel %s da %p1\nEnte: %p2\nCF: %p3\nCertificatore: %p4"
#msg[it:openssl:verifica:non_ok:non_ok]="Verifica certificato non riuscita e riferimento temporale non valido al di fuori della validità del certificato"
#msg[it:openssl:verifica:non_ok_scaduto:non_ok]="Verifica certificato non riuscita (certificato scaduto) e riferimento temporale non valido al di fuori della validità del certificato\n\nLa firma è stata fatta nel %s da %p1\nEnte: %p2\nCF: %p3\nCertificatore: %p4"
msg[it:openssl:verifica:errore:continuo]="Verifica documento e/o firme errate! Provo comunque ad estrarre il contenuto?"
msg[it:openssl:cert:errore]="Impossibile estrarre il certificato"
msg[it:openssl:cert:validita]="Validità certificato: %s"
msg[it:openssl:asn1parse:error]="Impossibile estrarre informazioni dal file"
msg[it:openssl:asn1parse:timestamp]="Riferimento temporale: %s"

msg[it:openssl:estrazione:percorso]="Estratto il file in "
msg[it:eseguibile:openssl:non_trovato]="Devi installare 'openssl' prima di poter usare questo programma"
msg[it:eseguibile:open_file:non_trovato]="Non trovo nessuno dei comandi:\n ${OPEN_ORDER}\nNon so come aprire il file estratto"
msg[it:eseguibile:download_url:non_trovato]="Nessun programma di download trovato! Impossibile continuare."
msg[it:download_url:ca:ok]="CA scaricato perfettamente in"
msg[it:download_url:ca:non_ok]="Impossibile scaricare il CA in questo momento ... riprovare successivamente"
msg[it:download_url:ca:mancante]="Manca il CA, scaricarlo con l'opzione -p"
msg[it:download_url:ca:attendi]="Inizio scaricamento CA ... attendi un attimo"
msg[it:file:diritti:scrittura]="Impossibile scrivere in "
msg[it:file:diritti:scrittura:alternativa]="Estratto comunque il file in "
msg[it:file:sovrascivere]="Sovrascrivere il file "

# en
msg[en:titolo:p7m]="P7M"
msg[en:titolo:openssl]="Openssl"
msg[en:titolo:openssl:verify]="Openssl verifica firma"
msg[en:titolo:openssl:cert]="Openssl Certificato"
msg[en:titolo:openssl:asn1parse]="Openssl debug"
msg[en:titolo:download]="Download"
msg[en:titolo:cert]="Cert"
msg[en:titolo:errore]="Error"
msg[en:titolo:attenzione]="Warning"
msg[en:titolo:dettagli]=" Details"

msg[en:errore:file:ext]="You must pass a .p7m file as a parameter"
msg[en:errore:file:ext:bad]="Bad file p7m format."
msg[en:errore:file:non_esiste]="There is no file. Check better"
msg[en:errore:file:conf_dir]="Unable to create the .p7m directory in your HOME"
msg[en:openssl:estrazione:errore]="File extraction ended with error"
msg[en:openssl:verifica:errore:formato]="Errore nel formato del file"
msg[en:openssl:verifica:ok:ok]="Signature verified correctly (timestamps within the validity of the certificate)\n\nThe signature was made in %s from %p1\nOrganization: %p2\nTax code: %p3\nIssuer: %p4"
msg[en:openssl:verifica:non_ok:ok]="Signature verification failed but timestamps within the validity of the certificate"
msg[en:openssl:verifica:non_ok_scaduto:ok]="Signature verification failed (certificate expired) but timestamps within the validity of the certificate\n\nThe signature was made in %s from %p1\nOrganization: %p2\nTax code: %p3\nIssuer: %p4"
msg[en:openssl:verifica:non_ok:non_ok]="Signature verification failed and timestamps failed, outside the validity of the certificate"
msg[en:openssl:verifica:non_ok_scaduto:non_ok]="Signature verification failed (certificate expired) and timestamps failed, outside the validity of the certificate\n\nThe signature was made in %s from %p1\nOrganization: %p2\nTax code: %p3\nIssuer: %p4"
msg[en:openssl:verifica:errore:continuo]="Verification document and/or signatures incorrect! Do I still try to extract the content?"
msg[en:openssl:cert:errore]="Unable to extract the certificates"
msg[en:openssl:cert:validita]="Certificate validity:: %s"
msg[en:openssl:asn1parse:error]="Unable to exact any info from this file"
msg[en:openssl:asn1parse:timestamp]="Timestamps: %s"

msg[en:openssl:estrazione:percorso]="Extract the file in "
msg[en:eseguibile:openssl:non_trovato]="You must install openssl first"
msg[en:eseguibile:open_file:non_trovato]="Extract the file"
msg[en:eseguibile:download_url:non_trovato]="No download program found! It is not possible to continue."
msg[en:download_url:ca:ok]="CA downloaded perfectly into"
msg[en:download_url:ca:non_ok]="Unable to download the 'CA' at this time ... try again later"
msg[en:download_url:ca:mancante]="The CA is missing, download it with the -p option"
msg[en:download_url:ca:attendi]="Starting download the CA ... wait, please"
msg[en:file:diritti:scrittura]="Unable to write in "
msg[en:file:diritti:scrittura:alternativa]="Extract the file in "
msg[en:file:sovrascivere]="Overwrite the file "

get_lang_message() {
	L=${LANG%.*}
	L=${L%_*}
	if [ "$L" = "C" ]; then 
		L='en'
	elif [ -z "$L" ]; then
		L='it'
	fi
	echo $L
}

_msg() {
	if [ -z "$1" ]; then
		return
	fi
	if [ -n "${msg[$L:$1]}" ]; then
		value="${msg[$L:$1]}"
	else 
		value="${msg[it:$1]}"
	fi
	if [ -n "$2" ]; then
		value=$(echo "$value" | sed "s/\%s/$2/g")
		value=$(echo "$value" | sed "s/\%p1/$3/g")
		value=$(echo "$value" | sed "s/\%p2/$4/g")
		value=$(echo "$value" | sed "s/\%p3/$5/g")
		value=$(echo "$value" | sed "s/\%p4/$6/g")
		value=$(echo "$value" | sed "s/\%p5/$7/g")
		value=$(echo "$value" | sed "s/\%p6/$8/g")
		value=$(echo "$value" | sed "s/\%p7/$9/g")
		value=$(echo "$value" | sed "s/\%p8/$10/g")
	fi
	echo "$value"
}
rotate_file() {
	if [ -z "$1" -o ! -f "$1" ]; then 
		return
	fi
	rotate=$((${ROTATE_NUMBER} -1))
	for r in `seq ${rotate} -1 1`; do
		rr=$(($r+1))
		if [ -f "$1.$r" ]; then
			mv "$1.$r" "$1.$rr"
		fi
	done
	mv "$1" "$1.1"
}

find_command() {
	com=''
	for c in "$@"; do
		if [ `which ${c}` ]; then
			com=${c}
			break
		fi
	done
	echo $com
}

# del_oldtmp_file()
#  Parametri di IN: nomi dei file da cancellare
#
# Cancellazione file temporanei creati in precedenza
# Prima della cancellazione faccio dei controlli di sicurezza:
#   - non devo cancellare il file originale
#   - non devo cancellare il file finale estratto
#   - il file deve esistere
#   - il file deve essere del tipo temporaneo creato da questo script (deve matchare "p7m_")
del_oldtmp_file() {
	for f in $@; do
		if [ "$f" != "$file" -a "$f" != "${p7m_attach}" -a -e "$f" -a "$f" != "${f/p7m_}" ]; then
			rm -f "$f"
		fi
	done
	return 0
}

download() {
	rotate_file "${CONF_DIR}/.dwn.log"
	touch "${CONF_DIR}/.dwn.log"
	if [ -z "${DWN}" ]; then 
		err "$(_msg "eseguibile:download_url:non_trovato")\n[${DWL_ORDER}]" "$(_msg "titolo:download")"
		exit 1
	fi
	if [ ${DWN} = 'wget' ]; then
	        wget --tries=2 -o ${CONF_DIR}/.dwn.log -O "$2" "$1"
	elif [ ${DWN} = 'curl' ]; then
		curl --progress-bar -v -o "$2" --retry 2 "$1" 2>${CONF_DIR}/.dwn.log
	elif [ ${DWN} = 'GET' ]; then
		GET "$1" >"$2"
	fi
	return $?
}
call_kdialog() {
	t='<html>'$(echo -e  "$2" | sed -e 's/ /\&nbsp;/g' -e 's/\*\*\*\(.*\)\*\*\*/<font color="red">\1<\/font>/g' -e 's/\*\*\(.*\)\*\*/<b>\1<\/b>/g' -e 's/$/<br>/g')'</html>'
	t2='<html>'$(echo -e  "$2<br><br><i>$3</i>" | sed -e 's/ /\&nbsp;/g' -e 's/\*\*\*\(.*\)\*\*\*/<font color="red">\1<\/font>/g' -e 's/\*\*\(.*\)\*\*/<b>\1<\/b>/g' -e 's/$/<br>/g')'</html>'
	if [ $1 = 'text' ]; then
		if [ ${#2} -gt 40960 ]; then
			log_file=$(mktemp --tmpdir "p7m_tmp.XXXXXXXXXX")
			echo -e  "$2" >$log_file
			kdialog --title "$3" --textbox "$log_file" --geometry 800x600 2>/dev/null
			rm -f $log_file
		else
			kdialog --title "$3" --msgbox "$t" 2>/dev/null
		fi
	elif [ $1 = 'warn' ]; then
		kdialog --title "$3" --sorry "$t" 2>/dev/null
	elif [ $1 = 'err' ]; then
		kdialog --title "$3" --error "$t" 2>/dev/null
	elif [ $1 = 'err_detail' ]; then
		kdialog --title "$4" --detailederror "$t" "$3" 2>/dev/null
	elif [ $1 = 'notify' ]; then
		kdialog --title "$3" --passivepopup "$1" 5 2>/dev/null
	elif [ $1 = 'warn_yesno' ]; then
		kdialog --title "$4" --warningyesno "$t2" 2>/dev/null
	fi
}
call_zenity() {
	if [ $1 = 'text' ]; then
		if [ ${#2} -gt 150 ]; then 
			echo -e "$2" | zenity --text-info --width=600 --height=500 --title="$3" 2>/dev/null
		else
			zenity --info --title="$3" --text="$2" 2>/dev/null
		fi
	elif [ $1 = 'warn' ]; then
		zenity --warning --title="$3" --text="$2" 2>/dev/null
	elif [ $1 = 'err' ]; then
		zenity --error --title="$3" --text="$2" 2>/dev/null
	elif [ $1 = 'err_detail' ]; then
		zenity --error --title="$4" --text="$2\n\n$3" 2>/dev/null
	elif [ $1 = 'notify' ]; then
		zenity --notification --title="$3" --text="$2" 2>/dev/null
	elif [ $1 = 'warn_yesno' ]; then
		zenity --question --title="$4" --text="$2\n\n$3" 2>/dev/null
	fi
}
call_xmessage() {
	if [ $1 = 'text' ]; then
		echo -e "$2" | xmessage -nearmouse -file - 2>/dev/null
	elif [ $1 = 'warn' ]; then
		echo -e "$2" | xmessage -nearmouse -file - 2>/dev/null
	elif [ $1 = 'err' ]; then
		echo -e "$2" | xmessage -nearmouse -file - 2>/dev/null
	elif [ $1 = 'err_detail' ]; then
		echo -e "$2\n\n$3" | xmessage -nearmouse -file - 2>/dev/null
	elif [ $1 = 'notify' ]; then
		echo -e "$2"
	elif [ $1 = 'warn_yesno' ]; then
		echo -e "$2\n\n$3"
	fi
}
call_echo() {
	# controllo se l'output va nel terminale o in una pipe
	if [ -t 1 ]; then
		t=$(echo -e "${BRed}$4${NC}\n\n$2" | sed -e "s/\*\*\*\(.*\)\*\*\*/\\\033[0;31m\1\\\033[0m/g" -e "s/\*\*\(.*\)\*\*/\\\033[1;37m\1\\\033[0m/g")
		if [ -n "$3" ]; then 
			if [ $1 = 'text' ]; then
				echo -e "${BWhite}$3${NC}"
			elif [ $1 = 'warn' ]; then
				echo -e "${BPurple}$3${NC}"
			else 
				echo -e "${BRed}$3${NC}"
			fi

		fi
		echo -e -n "$t "
		if [ $1 = 'warn_yesno' ]; then
			read -s -n 1 -p "[s/n] " answer
			echo
			answer=$(echo ${answer} | tr '[A-Z]' '[a-z]')
			if [ -z "$answer" ]; then
				answer=" "
			fi
			if [ "$answer" = 's' -o "$answer" = 'y' ]; then
				return 0
			else
				return 1
			fi
		else
			echo
		fi

		
	else
		if [ -n "$1" ]; then 
			echo -e "$3"
		fi
		echo -e  "$2"
	fi
}
display() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "text" "$@"
	else
		call_echo "text" "$@"
	fi
}
notify() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "notify" "$@"
	else

		call_echo "text" "$@"
	fi
}
warn() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "warn" "$@"
	else
		call_echo "warn" "$@"
	fi
}
err() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "err" "$@"
	else
		call_echo "err" "$@"
	fi
}
err_detail() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "err_detail" "$@"
	else
		call_echo "err" "$1" "$3" "$2"
	fi
}
warn_yesno() {
	if [ "${out}" = 'g' -a -n "${XDIALOG}" ]; then
		call_${XDIALOG} "warn_yesno" "$@"
	else
		call_echo "warn" "$1" "$3" "$2"
	fi
}
	
getnewcert() {
	if [ ! -f ${CONF_DIR}/ca.pem ]; then
	       getcert notify
	else
 		sec_old=$(date -r ${CONF_DIR}/ca.pem +%s)
		sec_now=$(date +%s)
		if [ $(( $sec_now - $sec_old )) -gt ${CA_OLD_TIME_SEC} ]; then
			getcert notify
		fi
	fi
}
getcert() {
  mkdir -p ${CONF_DIR}
  if [ ! -d "${CONF_DIR}" ]; then
	  err "$(_msg 'errore:file:conf_dir')" "$(_msg 'titolo:cert')"
	return 1
  fi
  notify "$(_msg 'download_url:ca:attendi')" "$(_msg 'titolo:cert')"
  rotate_file ${CONF_DIR}/cnipa_signed.xml
  download "${XML_CERTS}" "${CONF_DIR}/cnipa_signed.xml"
  # cnipa_signed.xml now is only one line long so we add e return value before start tag and after tag (X509Certificate)
  for i in `sed -e 's/<X509Certificate/\n<X509Certificate/g' -e s'#</X509Certificate>#</X509Certificate>\n#g' ${CONF_DIR}/cnipa_signed.xml | grep '<X509Certificate'`; do
	  echo -e "-----BEGIN CERTIFICATE-----"
	  echo $i| sed -e 's/<\/*X509Certificate>//g'| openssl base64 -d -A| openssl base64
	  echo -e "-----END CERTIFICATE-----"
  done >${CONF_DIR}/ca.pem.partial
if [ -s ${CONF_DIR}/ca.pem.partial ]; then
	rotate_file "${CONF_DIR}/ca.pem"
	mv "${CONF_DIR}/ca.pem.partial" "${CONF_DIR}/ca.pem"
	if [ "$1" ]; then
		notify "$(_msg 'download_url:ca:ok') ${CONF_DIR}/ca.pem" "$(_msg 'titolo:cert')"
	else
		display "$(_msg 'download_url:ca:ok') ${CONF_DIR}/ca.pem" "$(_msg 'titolo:cert')"
	fi
else
	rm -f ${CONF_DIR}/ca.pem.partial
	if [ "$1" ]; then
		notify "$(_msg 'download_url:ca:non_ok')\n\n[logs]:\n `cat ${CONF_DIR}/.dwn.log`" "$(_msg 'titolo:cert')"
	else
		err_detail "$(_msg 'download_url:ca:non_ok')" "'[logs]:\n `cat ${CONF_DIR}/.dwn.log`'" "$(_msg 'titolo:cert')"
	fi
	return 2
fi
return 0
}

# ##################################################### #
# from_base64_to_p7m():
# Converte un file p7m encodato in base64 in p7m standard
# Parametro di in: $1 = percorso del file da convertire
# Uscita: percorso del file p7m non encodato
# ##################################################### #
from_base64_to_p7m() {
	local file_pem=$1
	local newp7m=$(mktemp --tmpdir "p7m_tmp.XXXXXXXXXX")
	# check if in base64 format to convert in original p7m
	openssl base64 -A -d -in "$file_pem" -out "$newp7m" 2>&1
	if [ -s "$newp7m" ]; then
		echo "$newp7m"
	else
		del_oldtmp_file "$newp7m"
		echo "$file_pem"
	fi
	return 0
}


# ##################################################### #
# is_pkcs7():
#  Verifica se il file p7m passato come parametro è un vero p7m
# Parametro di in: $1 = percorso del file da verificare
# Uscita: 0 se verifica OK altrimenti 1
# ##################################################### #
is_pkcs7() {
	local file_test=$1
	local real_file_test=$(from_base64_to_p7m "$file_test")
	# check if in pem format
	openssl pkcs7 -print_certs -text -noout -inform pem -in "$real_file_test" >/dev/null 2>&1
	if [ $? == 0 ]; then
		echo "0"
		return 0
	fi
	# check if in der format
	openssl pkcs7 -print_certs -text -noout -inform der -in "$real_file_test" >/dev/null 2>&1
	if [ $? == 0 ]; then
		echo "0"
		return 0
	fi
	if [ "$real_file_test" != "$file_test" ]; then
		del_oldtmp_file "$real_file_test"
	fi
	echo "1"
	return 1
}

# ##################################################### #
# from_pem_to_der():
#  Converte un file p7m da PEM a DER
# Parametro di in: $1 = percorso del file da convertire
# Uscita: percorso del file in formato DER
# ##################################################### #
from_pem_to_der() {
	local file_pem=$1
	local der=$(mktemp --tmpdir "p7m_tmp.XXXXXXXXXX")
	# check if in pem format to convert in der
	openssl pkcs7 -print_certs -text -noout -inform pem -in "$file_pem" >/dev/null 2>&1
	if [ $? == 0 ]; then
		# convert from pem to der
		openssl pkcs7 -outform der -in "$file_pem" -out "$der"
	else
		del_oldtmp_file "$der"
		der="$file_pem"
	fi
	echo "$der"
	return 0
}

verify() {
	if [ ! -f "${CONF_DIR}/ca.pem" -o ! -s "${CONF_DIR}/ca.pem" ]; then
		warn "$(_msg 'download_url:ca:mancante')"
		return 1
	fi
	err=`openssl smime -verify -CAfile "${CONF_DIR}/ca.pem" -in "$1" -inform DER -out /dev/null 2>&1`
	R=$?
	if [ $R = "2" ]; then
		if [ -z "$2" ]; then
			err_detail "$(_msg 'openssl:verifica:errore:formato')" "$err" "$(_msg 'titolo:openssl:verify')"
		else 
			echo "$(_msg 'openssl:verifica:errore:formato');$err"
		fi
		return $R
	fi
	# in timestamps_array ci sono:
        #	negli elementi 0,2,4, ecc. (elementi pari) il serial del certificato di chi ha firmato
	#	negli elementi 1,3,5, ecc. (elementi dispari) l'UTCTIME in formato normalizzato con il locale impostato
	declare -a timestamps_array
	declare -a certs_orig_array
	declare -A serial_timestamps
	declare -A serial_certs
	declare -A utctime_hash
	OLD_IFS=$IFS
	IFS=$'\n' 
	timestamps_array=($(openssl pkcs7 -print -text -inform der -in "$1" | sed -n '/issuer_and_serial:/,/UTCTIME:/p'| grep -E ' serial:|UTCTIME:'| sed -e 's/^ *serial: *//' -e 's/^ *UTCTIME: *//' ))
	certs_orig_array=($(openssl pkcs7 -print -text -inform der -in "$1" | sed -n '/cert_info:/,/issuerUID:/p'| grep -E ' serialNumber:|issuer:|notBefore:|notAfter:|subject:' | grep -E ' serialNumber:|issuer:|notBefore:|notAfter:|subject:' | sed 's/^ *\(serialNumber:\|issuer:\|notBefore:\|notAfter:\|subject:\) *//'))
	IFS=$OLD_IFS
	for (( i=0; i<${#timestamps_array[*]}; i=$(($i+2)) )); do
          serial_timestamps[${timestamps_array[$i]}]=$i
	  utctime=${timestamps_array[$(($i+1))]}
	  utctime=$(date --date="${utctime}" "+%s")
	  utctime_hash[$utctime]=${timestamps_array[$i]}
	done
	# in certs_orig_array ci sono:
	#	negli elementi 0,5,10, ecc. (elementi 0 + 5*n) il serial del certificato
	#	negli elementi 1,6,11, ecc. (elementi 1 + 5*n) l'issue
	#	negli elementi 2,7,12, ecc. (elementi 2 + 5*n) il notBefore (data di partenza del certificato)
	#	negli elementi 3,8,13, ecc. (elementi 3 + 5*n) il notAfter (data di scadenza del certificato)
	#	negli elementi 4,9,14, ecc. (elementi 4 + 5*n) il subject (Nome, cognome, CF, ecc)
	for (( i=0; i<${#certs_orig_array[*]}; i=$(($i+5)) )); do
		serial_certs[${certs_orig_array[$i]}]=$i
	done
	# Debug for certs and timestamps
	# echo -e "\ntimestamps_array:\n"
	# echo "${timestamps_array[*]}"
	# echo -e "\ncerts_orig_array:\n"
	# echo "${certs_orig_array[*]}"
	# echo -e "\nserial_timestamps:\n"
	# for x in "${!serial_timestamps[@]}"; do echo "$x = ${serial_timestamps[$x]}"; done
	# echo -e "\nserial_certs:\n"
	# for x in "${!serial_certs[@]}"; do echo "$x = ${serial_certs[$x]}"; done
	# echo -e "\nutctime_hash:\n"
	# for x in "${!utctime_hash[@]}"; do echo "$x = ${utctime_hash[$x]}"; done
	# echo "${!utctime_hash[@]}" | sed -e 's/ /\n/g' |sort -n 
	# exit
	# Debug end: for certs and timestamps

	# verify_res: indica se 0 che le firme e i loro timestamp sono corretti; se >0 c'e' un errore
	verify_res=0
	declare -a verify_msg
	now=$(date "+%s")
	if [ ${#timestamps_array[*]} -eq 0 ]; then 
		timestamp_msg="$(_msg 'openssl:verifica:timestamp:mancante')"
		verify_res=8
	else
		idx=-1
		for utc in $(echo "${!utctime_hash[@]}" | sed -e 's/ /\n/g' | sort -n); do
			sn=${utctime_hash[$utc]}
			idx=$(($idx + 1 ))
			idx_ts=${serial_timestamps[$sn]}
			idx_cert=${serial_certs[$sn]}
			timestamp_readable=${timestamps_array[$(( $idx_ts + 1 ))]}
			timestamp=$(date --date="${timestamp_readable}" "+%s")
			issuer=${certs_orig_array[$(( $idx_cert + 1 ))]}
			notbefore=${certs_orig_array[$(( $idx_cert + 2 ))]}
			notafter=${certs_orig_array[$(( $idx_cert + 3 ))]}
			subject=${certs_orig_array[$(( $idx_cert + 4 ))]}
			cn=$(echo $subject |sed -e 's/^.*CN=//' -e 's/[\/,].*$//' 2>&1)
			cf=$(echo $subject |sed -e 's/^.*serialNumber=//' -e 's/[\/,].*$//' -e 's/^.*://' 2>&1)
			ou="non presente"
			if [ "$subject" != "${subject/O=}" ]; then
				ou=$(echo $subject |sed -e 's/^.*O=//' -e 's/[\/,].*$//' -e 's/^.*://' 2>&1)
			fi
			issuer_cn=$(echo $issuer|sed -e 's/^.*CN=//' -e 's/[\/,].*$//' 2>&1)
			notbefore_ts=$(date --date="${notbefore}" "+%s")
			notafter_ts=$(date --date="${notafter}" "+%s")

			# Debug for summury data
			# echo -e "serialNumber: $sn"
			# echo -e "\t idx_ts=$idx_ts, idx_cert=$idx_cert"
			# echo -e "\t timestamp_readable=$timestamp_readable, timestamp=$timestamp"
			# echo -e "\t issuer=$issuer"
			# echo -e "\t notBefore=$notbefore (ts=$notbefore_ts), notAfter=$notafter (ts=$notafter_ts)"
			# echo -e "\t subject=$subject"
			# echo -e "\t --------"
			# echo -e "\t cn=$cn, cf=$cf, ou=$ou"
			# echo -e "\t issuer_cn=$issuer_cn"
			# Debug end for summury data
			verify_res=0
			if [ $R = "0" ]; then
				verify_msg[$idx]="$(_msg 'openssl:verifica:ok:ok' "${cn}" "${timestamp_readable}" "${ou}" "${cf}" "${issuer_cn}" "${notbefore}" "${notafter}")"
			
			elif [ "${now}" -lt "${notbefore_ts}" -o "${now}" -gt "${notafter_ts}" ]; then
				if [ "${timestamp}" -ge "${notbefore_ts}" -a "${timestamp}" -le "${notafter_ts}" ]; then
					verify_msg[$idx]="$(_msg 'openssl:verifica:non_ok_scaduto:ok' "${cn}" "${timestamp_readable}" "${ou}" "${cf}" "${issuer_cn}" "${notbefore}" "${notafter}")"
				else
					verify_msg[$idx]="$(_msg 'openssl:verifica:non_ok_scaduto:non_ok' "${cn}" "${timestamp_readable}" "${ou}" "${cf}" "${issuer_cn}" "${notbefore}" "${notafter}")"
					verify_res=1
				fi
			else
				if [ "${timestamp}" -ge "${notbefore_ts}" -a "${timestamp}" -le "${notafter_ts}" ]; then
					verify_msg[$idx]="$(_msg 'openssl:verifica:non_ok:ok' "${cn}" "${timestamp_readable}" "${ou}" "${cf}" "${issuer_cn}" "${notbefore}" "${notafter}")"
				else
					verify_msg[$idx]="$(_msg 'openssl:verifica:non_ok:non_ok' "${cn}" "${timestamp_readable}" "${ou}" "${cf}" "${issuer_cn}" "${notbefore}" "${notafter}")"
					verify_res=2
				fi
			fi

		done
	fi
	echo "${verify_msg[*]}"
	return $verify_res
}

cert() {
	if [ ! -f "${CONF_DIR}/ca.pem" -o ! -s "${CONF_DIR}/ca.pem" ]; then
		echo "$(_msg 'download_url:ca:mancante')"
		return 1
	fi
	str=`openssl pkcs7 -print_certs -text -inform der -in "$1" 2>&1`
	R=$?
	echo "$str"
	return $R
}

debug_pkcs7() {
	str=`openssl asn1parse -inform der -in "$1" 2>&1`
	R=$?
	echo "$str"
	return $R
}

### START MAIN ###

if [ -n "${CONF_DIR}" -a ! -d "${CONF_DIR}" ]; then
	mkdir -p "${CONF_DIR}"
fi
if [ -f "${CONF_DIR}/p7m_config" ]; then
	# in questo file puoi modificare i messaggi ed aggiungere lingue, i vari programmi da utilizzare ed altro
	source "${CONF_DIR}/p7m_config"
fi

L=$(get_lang_message)
DWN=$(find_command ${DWL_ORDER})
OPEN=$(find_command ${OPEN_ORDER})
XDIALOG=$(find_command ${DIALOG_ORDER})

while getopts ":pvcdxg" arg; do
  case $arg in
      p)
	 op='p'
      ;;
      v)
          op='v'
      ;;
      c)
          op='c'
      ;;
      d)
	  op='d'
      ;;
      x)
	  op='x'
      ;;
      g)
	  out='g'  
      ;;
  esac
done
if [ "$op" == 'p' ]; then
	getcert
	R=$?
	exit $R
fi
shift $(($OPTIND - 1))
file=$@
if [ -z "$file" ]; then
	err "$(_msg 'errore:file:ext')" "$(_msg 'titolo:errore')"
  exit 1
fi
if [ ! -f "$file" ]; then
	err "$(_msg 'errore:file:non_esiste') ($file)" "$(_msg 'titolo:errore')"
  exit 2
fi
orig_path=$(dirname "$file")
name_file=$(echo ${file} | tr '[ A-Z]' '[_a-z]')
b1=$(basename "$name_file")
b2=$(basename "$name_file" .p7m)
if [ "$b1" = "$b2" ]; then
	warn "$(_msg 'errore:file:ext')" "$(_msg 'titolo:attenzione')"
  exit 3
fi
if [ ! `which openssl` ]; then
	err "$(_msg 'eseguibile:openssl:non_trovato')" "$(_msg 'it:titolo:openssl')"
  exit 4
fi

declare -a out_continue_array
declare -a unlink_files
checkfile="$file"
# p7m_attach: [Variabile  globale] Nome del file estratta dal .p7m
p7m_attach=""
level=-1
op_continue=1
op_continue_ret=0
op_title=''
if [ $(is_pkcs7 "$checkfile") -ne 0 ]; then 
	op_continue=0
	out_continue_array[0]=$(_msg 'errore:file:ext:bad')
fi
while [ $op_continue_ret -eq 0 -a $(is_pkcs7 "$checkfile") -eq 0 ]; do
	level=$(( $level + 1 ))
	# Se necessario converto da base64
	myfile_uu=$(from_base64_to_p7m "$checkfile")
	unlink_files+=("$myfile_uu")
	# Se necessario converto il file da PEM a DER
	myfile=$(from_pem_to_der "$myfile_uu")
	unlink_files+=("$myfile")
	
	if [ $level -eq 0 ]; then 
		getnewcert
	fi
	if [ "$op" == 'v' ]; then
		op_continue=0
		out_continue_array[$level]=$(verify "$myfile")
		op_continue_ret=$?
		if [ $op_continue_ret -eq 0 ]; then
			if [ -z "$op_title" ]; then
				op_title="openssl:verifica:title:ok"
			fi
		else
			op_title="openssl:verifica:title:non_ok"
		fi
	elif [ "$op" == 'c' ]; then
		op_continue=0
		out_continue_array[$level]=$(cert "$myfile")
		op_continue_ret=$?
		op_title="titolo:openssl:cert"
	elif [ "$op" == 'd' ]; then
		op_continue=0
		out_continue_array[$level]=$(debug_pkcs7 "$myfile")
		op_continue_ret=$?
		op_title="titolo:openssl:asn1parse"
	elif [ -f "${CONF_DIR}/ca.pem" -a -s "${CONF_DIR}/ca.pem" ]; then
		errv=$(verify "$myfile")
		codev=$?
		if [ $codev != "0" ]; then
			warn_yesno "$(_msg 'openssl:verifica:errore:continuo')" "" "$(_msg 'titolo:openssl')"
			if [ $? != 0 ]; then
				del_oldtmp_file "${unlink_files[*]}"
				exit 5
			fi
		fi
	fi
	checkfile=$(mktemp --tmpdir "p7m_tmp.XXXXXXXXXX")
	err=`openssl smime -verify -noverify -in "$myfile" -inform DER -out "$checkfile" 2>&1`
	code=$?
	unlink_files+=("$checkfile")
	if [ $code != "0" ]; then
		warn_yesno "$(_msg 'openssl:verifica:errore:continuo')" "$err" "$(_msg 'titolo:openssl')"
		if [ $? != 0 ]; then
			del_oldtmp_file "${unlink_files[*]}"
			exit 5
		fi
	fi
done
if [ $op_continue -eq 0 ]; then
	declare -a out_msg
	indent=''
	for (( i=$(( ${#out_continue_array[*]} -1 )); i>=0; i=$(($i-1)) )); do
		level=$(( ${#out_continue_array[*]} -1 - $i ))
		if [ $level -gt 0 ]; then 
			indent="$indent    "
			out_msg[$level]=$(echo -e "\n${DOWN_RIGHT_ARROW} ** livello $level **\n\n${out_continue_array[$i]}" | sed "s/^/$indent/g")"\n"
		elif [ ${#out_continue_array[*]} -gt 1 ]; then
			out_msg[$level]=$(echo "\n ** livello $level **\n\n${out_continue_array[$i]}")
		else
			out_msg[$level]=$(echo "\n${out_continue_array[$i]}")

		fi
	done
	display "${out_msg[*]}" "$(_msg ${op_title})"
	del_oldtmp_file "${unlink_files[*]}"
	exit $op_continue_ret;
fi
if [ "$checkfile" = "$file" ]; then
	exit 2
fi
newfile=$checkfile
t=`file -b --mime-type "$newfile"`
if [ "$t" = 'text/xml' ]; then
	t='text/xml|application/xml';
fi
p7m_attach=${newfile}
nf="${b2}"
if [ -n "$t" -a -f "${MIMETYPES}" ]; then
	read -a exts <<<$(grep -E "$t" "${MIMETYPES}")
	if [ -n "${exts[1]}" ]; then
		b3=$(basename "$b2" ".${exts[1]}")
		if [ "$b3" = "$b2" ]; then
			nf="${b2}.${exts[1]}"
		else
			nf="${b2}"
		fi
		nf=$(echo ${nf} | tr '[ A-Z]' '[_a-z]')
		p7m_attach=$(mktemp --tmpdir "p7m_tmp.XXXXXXXXXX-${nf}")
		mv "${newfile}" "${p7m_attach}"
	fi
fi
# Cancellazione file temporanei
del_oldtmp_file "${unlink_files[*]}"
if [ "$op" == 'x' ]; then
	if [ -e "${orig_path}/${nf}" ]; then
		warn_yesno "$(_msg 'file:sovrascivere') ${orig_path}/${nf}" "" "$(_msg 'titolo:p7m')"
		if [ $? != 0 ]; then
			exit 2
		fi
	fi
	err=$( mv "${p7m_attach}" "${orig_path}/${nf}" )
	if [ $? != "0" ]; then
		err "$(_msg 'file:diritti:scrittura') ${orig_path}\n$(_msg 'file:diritti:scrittura:alternativa') ${p7m_attach}"
	else
		notify "$(_msg 'openssl:estrazione:percorso') '${orig_path}/${nf}'\n[tipo: $t]"
	fi
elif [ -n "${OPEN}" ]; then
	# display "$(_msg 'eseguibile:open_file:non_trovato') ${p7m_attach}"
	${OPEN} "${p7m_attach}"
	exit 0
else 
	display "$(_msg 'eseguibile:open_file:non_trovato')  '${p7m_attach}'\n[tipo: $t]"
	exit 0
fi

# ########################################################################
#      Copyright (c) 2018 Enio Carboni - Italy
#
#      This file is part of p7m.
#
#    p7m is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    p7m is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with p7m.  If not, see <http://www.gnu.org/licenses/>.
# ########################################################################
